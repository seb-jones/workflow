#!/bin/bash

#
# GLOBAL VARIABLES
#

hostname="https://api.harvestapp.com/v2"

base_directory=$(dirname "$0")
credentials_directory="$base_directory/.credentials"
cache_directory="$base_directory/.cache"
state_directory="$base_directory/.state"

credentials_file="$credentials_directory/harvest.json"
project_cache_file="$cache_directory/harvest-projects.json"
current_project_file="$state_directory/harvest-project-id"
current_task_file="$state_directory/harvest-task-id"

access_token=""
account_id=""

#
# FUNCTIONS
#

function load_credentials() {
    if [[ ! -f "$credentials_file" ]]; then
        read -s -p "Harvest Access Token: "
        access_token=$REPLY
        echo ""

        read -s -p "Harvest Account ID: "
        account_id=$REPLY
        echo ""

        local data=$(cat \
<<JSON
{
    "access_token": "$access_token",
    "account_id": "$account_id"
}
JSON
        )

        echo "$data" | jq > "$credentials_file"
    fi

    local credentials_json=$(cat "$credentials_file")

    access_token=$(echo "$credentials_json" | jq -r '.access_token')
    account_id=$(echo "$credentials_json" | jq -r '.account_id')
}

function get() {
    curl --silent "$1" \
      -H "Authorization: Bearer $access_token" \
      -H "Harvest-Account-Id: $account_id" \
      -H "User-Agent: Test App (jones.seb95@googlemail.com)"
}

function post() {
    curl --silent "$1" \
      -H "Authorization: Bearer $access_token" \
      -H "Harvest-Account-Id: $account_id" \
      -H "User-Agent: Test App (jones.seb95@googlemail.com)" \
      -X POST \
      -H "Content-Type: application/json" \
      -d "$2"
}

function list_projects() {
        local filter=$(cat \
<<JQ
.[] | (.project.id | tostring) + "\t" +
    .client.name + "\t" +
    .project.name
JQ
        )

    jq --raw-output "$filter" "$project_cache_file" | column -s $'\t' -t 
}

function get_current_project() {
    if [[ -f "$current_project_file" ]]; then
        local project_id=$(cat "$current_project_file")

        local filter=$(cat \
<<JQ
.[] | select(.project.id == $project_id) |
    (.project.id | tostring) + "\t" +
    .client.name + "\t" +
    .project.name
JQ
        )

        jq --raw-output "$filter" "$project_cache_file" | column -s $'\t' -t
    fi
}

function set_current_project() {
    local original_ifs=$IFS
    IFS=$'\n'

    local projects=$(list_projects)

    if [[ -n "$1" ]]; then
        projects=$(echo "$projects" | grep -i "$1")
    fi

    select project in $projects
    do
        break
    done

    IFS="$original_ifs"

    project=$(echo "$project" | awk '{ print $1 }')

    echo "$project" > "$current_project_file"
}

function list_tasks() {
    if [[ -f "$current_project_file" ]]; then
        local project_id=$(cat "$current_project_file")

        local filter=$(cat \
<<JQ
.[] | select(.project.id == $project_id) |
    .task_assignments[] |
    (.task.id | tostring) + "\t" +
    .task.name
JQ
        )

        jq --raw-output "$filter" "$project_cache_file" | column -s $'\t' -t
    fi
}

function get_current_task() {
    if [[ -f "$current_task_file" ]]; then
        local project_id=$(cat $current_project_file)
        local task_id=$(cat "$current_task_file")

        local filter=$(cat \
<<JQ
.[] | select(.project.id == $project_id) |
    .task_assignments[] |
    select(.task.id == $task_id) |
    (.task.id | tostring) + "\t" +
    .task.name
JQ
        )

        jq --raw-output "$filter" "$project_cache_file" | column -s $'\t' -t
    fi
}

function set_current_task() {
    local original_ifs=$IFS
    IFS=$'\n'

    local tasks=$(list_tasks)

    if [[ -n "$1" ]]; then
        tasks=$(echo "$tasks" | grep -i "$1")
    fi

    select task in $tasks
    do
        break
    done

    IFS="$original_ifs"

    task=$(echo "$task" | awk '{ print $1 }')

    echo "$task" > "$current_task_file"
}

function start_timing() {
    local current_project_id=$(cat $current_project_file)
    local current_task_id=$(cat $current_task_file)
    local date=$(date +%F)

    local data=$(cat \
<<JSON
    "project_id": $current_project_id,
    "task_id": $current_task_id,
    "spent_date": "$date",
    "notes":"$1"
JSON
    )

    if [[ ! -z $2 ]]; then
        data=$(cat \
<<JSON
    $data,
    "external_reference": {
        "permalink": "$2"
    }
JSON
        )
    fi

    local temp=$(mktemp)

    post "$hostname/time_entries" "{$data}" > "$temp"

    handle_harvest_error "$temp"
}

function clear_cache() {
    rm -f "$project_cache_file"
}

function handle_harvest_error() {
    if ! jq '.' "$1" &> /dev/null; then
        cat "$1"
        echo ""
        exit 1
    fi

    if [[ $(jq '.error' "$1") != "null" ]]; then
        jq -r '.error_description' "$1" 1>&2
        exit 1
    fi
}

function cache_projects() {
    rm -f "$project_cache_file"

    local next_page="$hostname/users/me/project_assignments"

    local temp=""

    while [[ "$next_page" != "null" ]]; do
        temp=$(mktemp)

        get "$next_page" > "$temp"

        handle_harvest_error "$temp"

        jq '.project_assignments[]' "$temp" >> "$project_cache_file"

        next_page=$(jq -r '.links.next' "$temp")
    done

    temp=$(mktemp)

    jq -s '.' "$project_cache_file" > "$temp"

    cp "$temp" "$project_cache_file"
}

#
# SCRIPT
#

if [[ $# -eq 0 ]]; then
    printf "Usage: %s COMMAND [OPTIONS].\n" $(basename "$0")
    echo "
Available Commands:

clear-cache, cc                       Clear cache

list-projects, lp                     List available projects

list-tasks, lt                        List available tasks

get-current-project, gcp              Get the ID of the current project

set-current-project, scp  [SEARCH]    Select current project from a menu.
                                      Optionally passes [SEARCH] to grep to
                                      filter the menu items.

get-current-task, gct                 Select current task from a menu. 
                                      Optionally passes [SEARCH] to grep to
                                      filter the menu items.

set-current-task, sct     [SEARCH]    Set the current task

start-timing, st          NOTES [URL] Start a new timer on the current project 
                                      and current task with NOTES and 
                                      optionally linked to [URL]" 
    exit 1
fi

if [[ ! -d "$credentials_directory" ]]; then
    mkdir -p "$credentials_directory"
fi

if [[ ! -d "$cache_directory" ]]; then
    mkdir -p "$cache_directory"
fi

if [[ ! -d "$state_directory" ]]; then
    mkdir -p "$state_directory"
fi

if [[ $1 == "clear-cache" || $1 == "cc" ]]; then
    clear_cache
    exit 0
fi

load_credentials

if [[ ! -f $project_cache_file ]]; then
    cache_projects
fi

case $1 in
    "list-projects" | "lp" )
        list_projects
        ;;
    "list-tasks" | "lt" )
        list_tasks
        ;;
    "get-current-project" | "gcp" )
        get_current_project
        ;;
    "set-current-project" | "scp" )
        set_current_project "$2"
        ;;
    "get-current-task" | "gct" )
        get_current_task
        ;;
    "set-current-task" | "sct" )
        set_current_task "$2"
        ;;
    "start-timing" | "st" )
        start_timing "$2" "$3"
        ;;
esac
