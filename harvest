#!/bin/bash

#
# GLOBAL VARIABLES
#

HOSTNAME="https://api.harvestapp.com/v2"

BASE_DIRECTORY=$(dirname "$0")
CREDENTIALS_DIRECTORY="$BASE_DIRECTORY/.credentials"
CACHE_DIRECTORY="$BASE_DIRECTORY/.cache"
STATE_DIRECTORY="$BASE_DIRECTORY/.state"

CREDENTIALS_FILE="$CREDENTIALS_DIRECTORY/harvest.json"
PROJECT_CACHE_FILE="$CACHE_DIRECTORY/harvest-projects.json"
CURRENT_PROJECT_FILE="$STATE_DIRECTORY/harvest-project-id"
CURRENT_TASK_FILE="$STATE_DIRECTORY/harvest-task-id"

ACCESS_TOKEN=""
ACCOUNT_ID=""

#
# FUNCTIONS
#

function load_credentials() {
    if [[ ! -f "$CREDENTIALS_FILE" ]]; then
        read -s -p "Harvest Access Token: "
        ACCESS_TOKEN=$REPLY
        echo ""

        read -s -p "Harvest Account ID: "
        ACCOUNT_ID=$REPLY
        echo ""

        echo "{ \"access_token\": \"$ACCESS_TOKEN\", \"account_id\": \"$ACCOUNT_ID\" }" | \
            jq  > "$CREDENTIALS_FILE"

        return
    fi

    CREDENTIALS_JSON=$(cat "$CREDENTIALS_FILE")

    ACCESS_TOKEN=$(echo "$CREDENTIALS_JSON" | jq -r '.access_token')
    ACCOUNT_ID=$(echo "$CREDENTIALS_JSON" | jq -r '.account_id')
}

function get() {
    curl --silent "$1" \
      -H "Authorization: Bearer $ACCESS_TOKEN" \
      -H "Harvest-Account-Id: $ACCOUNT_ID" \
      -H "User-Agent: Test App (jones.seb95@googlemail.com)"
}

function post() {
    curl --silent "$1" \
      -H "Authorization: Bearer $ACCESS_TOKEN" \
      -H "Harvest-Account-Id: $ACCOUNT_ID" \
      -H "User-Agent: Test App (jones.seb95@googlemail.com)" \
      -X POST \
      -H "Content-Type: application/json" \
      -d "$2"
}

function list_projects() {
    jq --raw-output ".[] | (.project.id | tostring) + \"\t\" + .client.name + \"\t\" + .project.name" "$PROJECT_CACHE_FILE" | column -s $'\t' -t 
}

function get_current_project() {
    if [[ -f "$CURRENT_PROJECT_FILE" ]]; then
        PROJECT_ID=$(cat "$CURRENT_PROJECT_FILE")

        jq --raw-output ".[] | select(.project.id == $PROJECT_ID) | (.project.id | tostring) + \"\t\" + .client.name + \"\t\" + .project.name" "$PROJECT_CACHE_FILE" | column -s $'\t' -t
    fi
}

function set_current_project() {
    ORIGINAL_IFS=$IFS
    IFS=$'\n'

    PROJECTS=$(list_projects)

    if [[ -n "$1" ]]; then
        PROJECTS=$(echo "$PROJECTS" | grep -i "$1")
    fi

    select PROJECT in $PROJECTS
    do
        break
    done

    IFS="$ORIGINAL_IFS"

    PROJECT=$(echo "$PROJECT" | awk '{ print $1 }')

    echo "$PROJECT" > "$CURRENT_PROJECT_FILE"
}

function list_tasks() {
    if [[ -f "$CURRENT_PROJECT_FILE" ]]; then
        PROJECT_ID=$(cat "$CURRENT_PROJECT_FILE")

        jq --raw-output ".[] | select(.project.id == $PROJECT_ID) | .task_assignments[] | (.task.id | tostring) + \"\t\" + .task.name" "$PROJECT_CACHE_FILE" | column -s $'\t' -t
    fi
}

function get_current_task() {
    if [[ -f "$CURRENT_TASK_FILE" ]]; then
        PROJECT_ID=$(cat $CURRENT_PROJECT_FILE)
        TASK_ID=$(cat "$CURRENT_TASK_FILE")

        jq --raw-output ".[] | select(.project.id == $PROJECT_ID) | .task_assignments[] | select(.task.id == $TASK_ID) | (.task.id | tostring) + \"\t\" + .task.name" "$PROJECT_CACHE_FILE" | column -s $'\t' -t
    fi
}

function set_current_task() {
    ORIGINAL_IFS=$IFS
    IFS=$'\n'

    TASKS=$(list_tasks)

    if [[ -n "$1" ]]; then
        TASKS=$(echo "$TASKS" | grep -i "$1")
    fi

    select TASK in $TASKS
    do
        break
    done

    IFS="$ORIGINAL_IFS"

    TASK=$(echo "$TASK" | awk '{ print $1 }')

    echo "$TASK" > "$CURRENT_TASK_FILE"
}

function start_timing() {
    CURRENT_PROJECT_ID=$(cat $CURRENT_PROJECT_FILE)
    CURRENT_TASK_ID=$(cat $CURRENT_TASK_FILE)
    DATE=$(date +%F)

    DATA=$(cat \
<<JSON
    "project_id": $CURRENT_PROJECT_ID,
    "task_id": $CURRENT_TASK_ID,
    "spent_date": "$DATE",
    "notes":"$1"
JSON
    )

    if [[ ! -z $2 ]]; then
        DATA=$(cat \
<<JSON
    $DATA,
    "external_reference": {
        "permalink": "$2"
    }
JSON
        )
    fi

    post "$HOSTNAME/time_entries" "{$DATA}"
}

function clear_cache() {
    rm -f "$PROJECT_CACHE_FILE"
}

function handle_harvest_error() {
    if ! jq '.' "$1" &> /dev/null; then
        cat "$TEMP"
        echo ""
        exit 1
    fi

    if [[ $(jq '.error' "$1") != "null" ]]; then
        jq -r '.error_description' "$1" 1>&2
        exit 1
    fi
}

function cache_projects() {
    rm -f "$PROJECT_CACHE_FILE"

    NEXT_PAGE="$HOSTNAME/users/me/project_assignments"

    while [[ "$NEXT_PAGE" != "null" ]]; do
        TEMP=$(mktemp)

        get "$NEXT_PAGE" > "$TEMP"

        handle_harvest_error "$TEMP"

        jq '.project_assignments[]' "$TEMP" >> "$PROJECT_CACHE_FILE"

        NEXT_PAGE=$(jq -r '.links.next' "$TEMP")
      
    done

    TEMP=$(mktemp)
    jq -s '.' "$PROJECT_CACHE_FILE" > "$TEMP"
    cp "$TEMP" "$PROJECT_CACHE_FILE"
}

#
# SCRIPT
#

if [[ $# -eq 0 ]]; then
    printf "Usage: %s COMMAND [OPTIONS].\n" $(basename "$0")
    echo ""
    echo "Available Commands:"
    echo ""
    echo "clear-cache, cc                       Clear cache"
    echo "list-projects, lp                     List available projects"
    echo "list-tasks, lt                        List available tasks"
    echo "get-current-project, gcp              Get the ID of the current project"
    echo "set-current-project, scp  [SEARCH]    Select current project from a menu. Optionally passes [SEARCH] to grep to filter the menu items."
    echo "get-current-task, gct                 Select current task from a menu. Optionally passes [SEARCH] to grep to filter the menu items."
    echo "set-current-task, sct     [SEARCH]    Set the current task"
    echo "start-timing, st          NOTES [URL] Start a new timer on the current project and current task with NOTES and optionally linked to [URL]" 
    exit 1
fi

if [[ ! -d "$CREDENTIALS_DIRECTORY" ]]; then
    mkdir -p "$CREDENTIALS_DIRECTORY"
fi

if [[ ! -d "$CACHE_DIRECTORY" ]]; then
    mkdir -p "$CACHE_DIRECTORY"
fi

if [[ ! -d "$STATE_DIRECTORY" ]]; then
    mkdir -p "$STATE_DIRECTORY"
fi

if [[ $1 == "clear-cache" || $1 == "cc" ]]; then
    clear_cache
    exit 0
fi

load_credentials

if [[ ! -f $PROJECT_CACHE_FILE ]]; then
    cache_projects
fi

case $1 in
    "list-projects" | "lp" )
        list_projects
        ;;
    "list-tasks" | "lt" )
        list_tasks
        ;;
    "get-current-project" | "gcp" )
        get_current_project
        ;;
    "set-current-project" | "scp" )
        set_current_project "$2"
        ;;
    "get-current-task" | "gct" )
        get_current_task
        ;;
    "set-current-task" | "sct" )
        set_current_task "$2"
        ;;
    "start-timing" | "st" )
        start_timing "$2" "$3"
        ;;
esac
