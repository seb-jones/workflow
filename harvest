#!/bin/bash

#
# GLOBAL VARIABLES
#

HOSTNAME="https://api.harvestapp.com/v2"

BASE_DIRECTORY=$(dirname "$0")

CREDENTIALS_FILE="$BASE_DIRECTORY/.credentials/harvest.json"
PROJECT_CACHE_FILE="$BASE_DIRECTORY/.cache/harvest-projects.json"
TASK_CACHE_FILE="$BASE_DIRECTORY/.cache/harvest-tasks.json"
CURRENT_PROJECT_FILE="$BASE_DIRECTORY/.current-project"
CURRENT_TASK_FILE="$BASE_DIRECTORY/.current-task"

ACCESS_TOKEN=""
ACCOUNT_ID=""

#
# FUNCTIONS
#

function load_credentials() {
    CREDENTIALS_JSON=$(cat "$CREDENTIALS_FILE")

    ACCESS_TOKEN=$(echo "$CREDENTIALS_JSON" | jq -r '.access_token')

    ACCOUNT_ID=$(echo "$CREDENTIALS_JSON" | jq -r '.account_id')
}

function get() {
    curl --no-progress-meter "$1" \
      -H "Authorization: Bearer $ACCESS_TOKEN" \
      -H "Harvest-Account-Id: $ACCOUNT_ID" \
      -H "User-Agent: Test App (therealsebshady@googlemail.com)"
}

function post() {
    curl --no-progress-meter "$1" \
      -H "Authorization: Bearer $ACCESS_TOKEN" \
      -H "Harvest-Account-Id: $ACCOUNT_ID" \
      -H "User-Agent: Test App (therealsebshady@googlemail.com)" \
      -X POST \
      -H "Content-Type: application/json" \
      -d "$2"
}

function start_timing() {
    CURRENT_PROJECT=$(get_current_project)
    CURRENT_TASK=$(get_current_task)
    DATE=$(date +%F)

    DATA=$(cat <<JSON
    "project_id": $CURRENT_PROJECT,
    "task_id": $CURRENT_TASK,
    "spent_date": "$DATE",
    "notes":"$1"
JSON
)

    if [[ ! -z $2 ]]; then
        DATA=$(cat <<JSON
    $DATA,
    "external_reference": {
        "permalink": "$2"
    }
JSON
)
    fi

    post "$HOSTNAME/time_entries" "{$DATA}"
}

function list_projects() {
    jq --raw-output '.projects[] | (.id | tostring) + " " + .name' "$PROJECT_CACHE_FILE"
}

function list_tasks() {
    jq --raw-output '.tasks[] | (.id | tostring) + " " + .name' "$TASK_CACHE_FILE"
}

function get_current_user() {
    get "$HOSTNAME/users/me"
}

function get_current_project() {
    if [[ -f "$CURRENT_PROJECT_FILE" ]]; then
        cat "$CURRENT_PROJECT_FILE"
    fi
}

function set_current_project() {
    echo "$1" > "$CURRENT_PROJECT_FILE"
}

function get_current_task() {
    if [[ -f "$CURRENT_TASK_FILE" ]]; then
        cat "$CURRENT_TASK_FILE"
    fi
}

function set_current_task() {
    echo "$1" > "$CURRENT_TASK_FILE"
}

function clear_cache() {
    rm -f "$PROJECT_CACHE_FILE"
    rm -f "$TASK_CACHE_FILE"
}

#
# SCRIPT
#

if [[ $# -eq 0 ]]; then
    printf "Usage: %s COMMAND [OPTIONS].\n\n" "$0"
    printf "Availble Commands:\n\n"
    printf "cc\t\tClear cache.\n"
    printf "lp\t\tList available projects.\n"
    printf "lt\t\tList available tasks.\n"
    printf "gcp\t\tGet the ID of the current project.\n"
    printf "scp PROJECT_ID\tSet the current project to PROJECT_ID.\n"
    printf "gct\t\tGet the ID of the current task.\n"
    printf "sct TASK_ID\tSet the current task to TASK_ID.\n"
    printf "st  NOTES [URL]\tStart a new timer on the current project and\n"
    printf "\t\tcurrent task with NOTES and optionally linked to [URL].\n" 
    exit 1
fi

load_credentials

if [[ ! -f $PROJECT_CACHE_FILE ]]; then
    get "$HOSTNAME/projects" > $PROJECT_CACHE_FILE
fi

if [[ ! -f $TASK_CACHE_FILE ]]; then
    get "$HOSTNAME/tasks" > $TASK_CACHE_FILE
fi

case $1 in
    "cc" )
        clear_cache
        ;;
    "lp" )
        list_projects
        ;;
    "lt" )
        list_tasks
        ;;
    "gcp" )
        get_current_project
        ;;
    "scp" )
        set_current_project "$2"
        ;;
    "gct" )
        get_current_task
        ;;
    "sct" )
        set_current_task "$2"
        ;;
    "st" )
        start_timing "$2" "$3"
        ;;
esac
