#!/bin/bash

#
# GLOBAL VARIABLES
#

hostname="https://gitlab.com/api/v4"

base_directory=$(dirname "$0")
credentials_directory="$base_directory/.credentials"
cache_directory="$base_directory/.cache"
state_directory="$base_directory/.state"

credentials_file="$credentials_directory/gitlab_access_token"
project_cache_file="$cache_directory/gitlab-projects.json"

response_header_temp_file="/tmp/gitlab-api-reponse-headers"

access_token=""
current_project_id=""

#
# FUNCTIONS
#

function set_current_project() {
    url=$( \
        git remote -v | \
        grep '(fetch)$' | \
        cut -f 2,2 | \
        cut -f 1,1 -d $' '
    )

    filter=$(cat \
<<JQ
.[] | select(.ssh_url_to_repo == "$url") | .id
JQ
    )

    current_project_id=$(jq "$filter" "$project_cache_file")
}

function load_credentials() {
    if [[ ! -f "$credentials_file" ]]; then
        read -s -p "GitLab Access Token: "
        access_token=$REPLY
        echo ""

        echo "$access_token" > "$credentials_file"
    fi

    access_token=$(cat "$credentials_file")
}

function get() {
    curl --silent "$1" \
      -H "Authorization: Bearer $access_token" \
      -H "User-Agent: GitLab Bash Script (jones.seb95@googlemail.com)" \
      -D "$response_header_temp_file"
}

function post() {
    curl --silent "$1" \
      -H "Authorization: Bearer $access_token" \
      -H "User-Agent: GitLab Bash Script (jones.seb95@googlemail.com)" \
      -X POST \
      "${@:2}"
}

function list_projects() {
        local filter=$(cat \
<<JQ
.[] | (.id | tostring) + "\t" +
    .name_with_namespace
JQ
        )

    jq --raw-output "$filter" "$project_cache_file" | column -s $'\t' -t 
}

function new_issue() {
    post "$hostname/projects/$current_project_id/issues" \
        --data-urlencode "title=$1" \
        --data-urlencode "description=$2"
}

function new_branch() {
    post "$hostname/projects/$current_project_id/repository/branches" \
        --data-urlencode "branch=$1" \
        --data-urlencode "ref=$2"
}

function new_merge_request() {
    post "$hostname/projects/$current_project_id/merge_requests" \
        --data-urlencode "title=$3" \
        --data-urlencode "description=$4" \
        --data-urlencode "source_branch=$1" \
        --data-urlencode "target_branch=$2"
}

function clear_cache() {
    rm -f "$project_cache_file"
}

function cache_projects() {
    local temp=$(mktemp)
    local next_page="$hostname/projects?simple=1&membership=1&per_page=100&page=1"

    rm -f "$project_cache_file"

    while [[ -n "$next_page" ]]; do
        get "$next_page" > "$temp"

        jq '.[]' "$temp" >> "$project_cache_file"

        local link_header=$( \
            grep '^link:' "$response_header_temp_file" \
        )

        if echo "$link_header" | grep -q 'rel="next"'; then
            next_page=$( \
                echo "$link_header" | \
                grep -oE '<.*rel="next"' | \
                grep -oE 'https://[^>]+'
            )
        else
            next_page=""
        fi
    done

    jq -s '.' "$project_cache_file" > "$temp"

    cp "$temp" "$project_cache_file"
}

#
# SCRIPT
#

if [[ $# -eq 0 ]]; then
    printf "Usage: %s COMMAND [OPTIONS].\n" $(basename "$0")
    echo "
Available Commands:

clear-cache, cc                       Clear cache

list-projects, lp                     List available projects

new-issue, ni    TITLE [DESCRIPTION]  Create a new issue.

new-branch, nb   NAME FROM            Create a new branch.

new-merge-request, nmr SOURCE TARGET TITLE [DESCRIPTION]           
                                      Create a new merge request.
"

    exit 1
fi

if [[ ! -d "$credentials_directory" ]]; then
    mkdir -p "$credentials_directory"
fi

if [[ ! -d "$cache_directory" ]]; then
    mkdir -p "$cache_directory"
fi

if [[ ! -d "$state_directory" ]]; then
    mkdir -p "$state_directory"
fi

if [[ $1 == "clear-cache" || $1 == "cc" ]]; then
    clear_cache
    exit 0
fi

load_credentials

if [[ ! -f $project_cache_file ]]; then
    cache_projects
fi

set_current_project

case $1 in
    "list-projects" | "lp" )
        list_projects
        ;;
    "new-issue" | "ni" )
        new_issue "$2" "$3"
        ;;
    "new-branch" | "nb" )
        new_branch "$2" "$3"
        ;;
    "new-merge-request" | "nmr" )
        new_merge_request "$2" "$3" "$4" "$5"
        ;;
esac
